{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Card/Card.js","components/Header/Header.js","components/Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Card","style","backgroundImage","src","alt","onClick","handleClick","name","Header","id","score","Container","state","beers","beerCards","resetGame","setState","handleCorrect","newbeers","shuffleArray","alert","console","log","handleWrong","guessedCorrect","map","beer","newPic","clicked","i","length","j","Math","floor","random","this","key","image","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kiGAIeA,EAFC,SAAAC,GAAK,OAAI,yBAAKC,UAAU,WAAWD,EAAME,W,sBCY1CC,G,MAXF,SAAAH,GACX,OACE,yBACEI,MAAO,CAAEC,gBAAgB,OAAD,OAASL,EAAMM,IAAf,MACxBC,IAAKP,EAAMO,IACXN,UAAU,OACVO,QAAS,kBAAMR,EAAMS,YAAYT,EAAMU,WCC9BC,G,MAPA,SAAAX,GAAK,OAClB,yBAAKY,GAAG,kBAAkBX,UAAU,aAClC,yBAAKW,GAAG,SAAR,4BACA,yBAAKA,GAAG,cAAR,wCACA,yBAAKA,GAAG,YAAR,UAA2BZ,EAAMa,U,gOCoFtBC,E,2MApFbC,MAAQ,CACNC,MAAOC,EACPJ,MAAO,G,EAGTK,UAAY,WACV,EAAKC,SAAS,CACZN,MAAO,EACPG,MAAOC,K,EAIXG,cAAgB,SAAAC,GACd,EAAKF,SAAS,CACZH,MAAO,EAAKM,aAAaD,GACzBR,MAAO,EAAKE,MAAMF,MAAQ,IAGH,KAArB,EAAKE,MAAMF,QACbU,MAAM,sDACN,EAAKL,YACLM,QAAQC,IAAI,c,EAIhBC,YAAc,WACZH,MAAM,kDACN,EAAKL,a,EAGPT,YAAc,SAAAC,GACZc,QAAQC,IAAI,SAAWf,GACvB,IAAIiB,GAAiB,EACfN,EAAW,EAAKN,MAAMC,MAAMY,IAAI,SAAAC,GACpC,IAAMC,E,qVAAM,IAAQD,GAOpB,OANIC,EAAOpB,OAASA,IACboB,EAAOC,UACVD,EAAOC,SAAU,EACjBJ,GAAiB,IAGdG,IAETN,QAAQC,IAAI,mBAAoBE,GAMhCA,EAAiB,EAAKP,cAAcC,GAAY,EAAKK,YAAYL,I,EAGnEC,aAAe,SAAAN,GACb,IAAK,IAAIgB,EAAIhB,EAAMiB,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAAChB,EAAMkB,GAAIlB,EAAMgB,IAAvChB,EAAMgB,GAFkC,KAE9BhB,EAAMkB,GAFwB,KAI3C,OAAOlB,G,wEAGC,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAQH,MAAOyB,KAAKvB,MAAMF,QAC1B,yBAAKZ,UAAU,oBACb,yBAAKA,UAAU,aACZqC,KAAKvB,MAAMC,MAAMY,IAAI,SAAAC,GACpB,OACE,kBAAC,EAAD,CACEnB,KAAMmB,EAAKnB,KACX6B,IAAKV,EAAKnB,KACVD,YAAa,EAAKA,YAClBH,IAAKuB,EAAKW,MACVjC,IAAKsB,EAAKnB,gB,GA1EJ+B,aCQTC,E,iLARX,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,W,GAJUD,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f21ec491.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div\r\n      style={{ backgroundImage: `url(${props.src})` }}\r\n      alt={props.alt}\r\n      className=\"card\"\r\n      onClick={() => props.handleClick(props.name)}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = props => (\r\n  <div id=\"headerContainer\" className=\"container\">\r\n    <div id=\"title\">Click to drink the Beer!</div>\r\n    <div id=\"directions\">But don't drink the same Beer twice!</div>\r\n    <div id=\"scoreDiv\">Score: {props.score}</div>\r\n  </div>\r\n);\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport \"./Container.css\";\r\nimport beerCards from \"../../beers.json\";\r\nimport Card from \"../Card\";\r\nimport Header from \"../Header/Header\";\r\n\r\nclass Container extends Component {\r\n  state = {\r\n    beers: beerCards,\r\n    score: 0\r\n  };\r\n\r\n  resetGame = () => {\r\n    this.setState({\r\n      score: 0,\r\n      beers: beerCards\r\n    });\r\n  };\r\n\r\n  handleCorrect = newbeers => {\r\n    this.setState({\r\n      beers: this.shuffleArray(newbeers),\r\n      score: this.state.score + 1\r\n    });\r\n\r\n    if (this.state.score === 11) {\r\n      alert(\"You can handle your booze and got to drink all 12!\");\r\n      this.resetGame();\r\n      console.log(\"You won!\");\r\n    }\r\n  };\r\n\r\n  handleWrong = () => {\r\n    alert(\"You must be drunk! You already drank that one!\");\r\n    this.resetGame();\r\n  };\r\n\r\n  handleClick = name => {\r\n    console.log(\"BEER: \" + name);\r\n    let guessedCorrect = false;\r\n    const newbeers = this.state.beers.map(beer => {\r\n      const newPic = { ...beer };\r\n      if (newPic.name === name) {\r\n        if (!newPic.clicked) {\r\n          newPic.clicked = true;\r\n          guessedCorrect = true;\r\n        }\r\n      }\r\n      return newPic;\r\n    });\r\n    console.log(\"Correct Guess?: \", guessedCorrect);\r\n    // console.log(guessedCorrect);\r\n    // console.log(\"Brewery - Beer: \" + beer.name);\r\n    // console.log(\"Untappd url: \" + newPic.unTappd);\r\n    // console.log(\"Brewery Webpage: \" + newPic.url);\r\n\r\n    guessedCorrect ? this.handleCorrect(newbeers) : this.handleWrong(newbeers);\r\n  };\r\n\r\n  shuffleArray = beers => {\r\n    for (let i = beers.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [beers[i], beers[j]] = [beers[j], beers[i]];\r\n    }\r\n    return beers;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header score={this.state.score} />\r\n        <div className=\"containerWrapper\">\r\n          <div className=\"container\">\r\n            {this.state.beers.map(beer => {\r\n              return (\r\n                <Card\r\n                  name={beer.name}\r\n                  key={beer.name}\r\n                  handleClick={this.handleClick}\r\n                  src={beer.image}\r\n                  alt={beer.name}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Container from \"./components/Container/Container\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Wrapper>\n        <Container />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}